/* Welcome to the SQL mini project. You will carry out this project partly in
the PHPMyAdmin interface, and partly in Jupyter via a Python connection.

This is Tier 2 of the case study, which means that there'll be less guidance for you about how to setup
your local SQLite connection in PART 2 of the case study. This will make the case study more challenging for you: 
you might need to do some digging, aand revise the Working with Relational Databases in Python chapter in the previous resource.

Otherwise, the questions in the case study are exactly the same as with Tier 1. 

PART 1: PHPMyAdmin
You will complete questions 1-9 below in the PHPMyAdmin interface. 
Log in by pasting the following URL into your browser, and
using the following Username and Password:

URL: https://sql.springboard.com/
Username: student
Password: learn_sql@springboard

The data you need is in the "country_club" database. This database
contains 3 tables:
    i) the "Bookings" table,
    ii) the "Facilities" table, and
    iii) the "Members" table.

In this case study, you'll be asked a series of questions. You can
solve them using the platform, but for the final deliverable,
paste the code for each solution into this script, and upload it
to your GitHub.

Before starting with the questions, feel free to take your time,
exploring the data, and getting acquainted with the 3 tables. */


/* QUESTIONS 
/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */
SELECT name 
FROM Facilities
WHERE membercost <> 0

/* Q2: How many facilities do not charge a fee to members? */
SELECT COUNT(name) 
FROM Facilities
WHERE membercost = 0

/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */
SELECT * 
FROM Facilities
WHERE membercost < 0.2 * monthlymaintenance
AND membercost <>0

/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. =-= */
SELECT * 
FROM Facilities
WHERE facid in (1,5)

/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */
SELECT name, monthlymaintenance, 
CASE WHEN monthlymaintenance >100
THEN  'expensive'
ELSE  'cheap'
END AS category
FROM Facilities

/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */
SELECT firstname, surname, joindate
FROM Members
WHERE joindate = (
SELECT MAX(joindate) 
FROM Members)

/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

select distinct name, t.fullname from Facilities as f
Inner join 
(select facid,
 CONCAT(firstname,' ',surname) as fullname
 from Bookings as b
 inner join Members as m
 on m.memid = b. memid) as t
on f.facid = t.facid
where name = 'Table Tennis'
order by fullname


/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

SELECT CONCAT( mem.firstname,  " ", mem.surname ) AS Full_Name, fac.name, 
CASE WHEN (
book.memid >0
AND fac.membercost * book.slots >30
)
THEN fac.membercost * book.slots
WHEN (
book.memid =0
AND fac.guestcost * book.slots >30
)
THEN fac.guestcost * book.slots
ELSE NULL 
END AS cost
FROM Bookings book
JOIN Facilities fac ON book.facid = fac.facid
JOIN Members mem ON book.memid = mem.memid
WHERE book.starttime LIKE  '2012-09-14%'
ORDER BY cost DESC 


/* Q9: This time, produce the same result as in Q8, but using a subquery. */
SELECT name, fullname, 
CASE WHEN subquery.memid =0
THEN subquery.slots * subquery.guestcost
ELSE subquery.slots * subquery.membercost
END AS cost
FROM (

SELECT bookid, slots, starttime, m.memid, CONCAT( m.firstname,  ' ', m.surname ) AS fullname, f.name, f.guestcost, f.membercost
FROM Bookings AS b
INNER JOIN Members AS m ON m.memid = b.memid
INNER JOIN Facilities AS f ON f.facid = b.facid
WHERE starttime LIKE  '2012-09-14%'
) AS subquery
having cost >=30
ORDER BY cost  DESC 

/* PART 2: SQLite

Export the country club data from PHPMyAdmin, and connect to a local SQLite instance from Jupyter notebook 
for the following questions.  

QUESTIONS:
/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */
with member as (
SELECT f.name, SUM(slots), 
SUM(slots) * f.membercost as memberincome
FROM Bookings AS b
INNER JOIN Facilities AS f ON f.facid = b.facid
WHERE memid <>0
GROUP BY f.name),

guest as (
SELECT f.name, SUM(slots), 
SUM(slots) * f.guestcost as guestincome
FROM Bookings AS b
INNER JOIN Facilities AS f ON f.facid = b.facid
WHERE memid =0
GROUP BY f.name)

select name, memberincome, guest.guestincome, f.monthlymaintenance, 
(guest.income + memberincome - f.monthlymaintenance*3) as revenue
from member
inner join guest
on member.name = guest.name
having revenue < 1000
order by revenue 

--
SELECT sub.name, SUM( sub.revenue ) AS total_rev
FROM (

SELECT fac.name, 
CASE WHEN book.memid >0
THEN book.slots * membercost
ELSE book.slots * guestcost
END AS revenue
FROM Bookings book
JOIN Facilities fac ON book.facid = fac.facid
) AS sub
GROUP BY sub.name
HAVING SUM( sub.revenue ) <1000
ORDER BY total_rev
--
/* Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order */
query11 = """
SELECT * 
FROM Members
WHERE recommendedby <>0
ORDER BY surname, firstname
        """

/* Q12: Find the facilities with their usage by member, but not guests */
query12 = """
SELECT memid, f.name, SUM(slots) 
FROM Bookings AS b
INNER JOIN Facilities AS f ON f.facid = b.facid
WHERE memid <>0
GROUP BY memid, f.name
        """

/* Q13: Find the facilities usage by month, but not guests */
query13 ="""SELECT EXTRACT(
MONTH FROM starttime) AS 
MONTH, f.name, SUM(slots) 
FROM Bookings AS b
INNER JOIN Facilities AS f ON f.facid = b.facid
WHERE memid <>0
GROUP BY MONTH , f.name"""

